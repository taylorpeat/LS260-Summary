260

Tools

Backbone
Window Object
History Object
Web Workers
NPM
Bower
Grunt
Jasmine
Express
Jade
Stylus


Folder Structure fo Backbone Application

bower_components
dependencies declared in bower.json
folders for each dependency

local_modules
js files you have created with a module.exports.
Used to import modules to add functionality

node_modules
modules that come with node or "npm installed" and can be required in code

public - client-side files
  data - json files etc.
  images - image files
  javascripts - client-side javascript files
application.js - App file which controls other files
handlebars_templates - handlebars templates which have been precompiled and combined by Grunt
router.js - Backbone router which works with Backbone.history
    collections - Backbone collections js files
    models - Backbone models js files
    views - Backbone views js files
    vendor - all.js file which is all the bower dependencies combined by Grunt
    stylesheets - css files, styl files, css resets

routes - server side routing code
all.js - file which combines other route files and adds them to a router created with express.Router()
[otherRoutes].js
file which defines routes based on url
can manipulate backend data, decide what to render or send JSON back etc.

views - html/jade files for initial rendering
      (handlebars used by backbone in lieu of these files for single page applications
  partials - jade partials or mixins, prepended with _


app.js - backend code I don’t understand
app object is created with express, set views folder, routes folder, whether to use stylus etc.

bower.json - file which contains dependencies to be run by bower and other info
Gruntfile.js - file containing tasks to be run by grunt like combining bower dependencies into one file, uglifying the file, preprocessing handlebars etc.
you need to load the tasks which are formatted ‘grunt-contrib-[taskName]’
grunt.initConfig({
    taskName: {
      [code for task]
    }
    }
assign default tasks to be run when grunt is called in terminal
non-default tasks can be called by 'grunt [taskName]’ in terminal

package.json
npm thing, created on 'npm init'
contains list of dependencies for npm to install during ‘npm install’
can be separated into devDependencies
`npm install [packageName] -S` saves package name into package.json
`npm install [packageName] -D` saves package name into package.json as dev dependency



Backbone

Components
Models
Collections
Views
Router
Events

Backbone.[component].extend() for models, collections, views, routers creates a constructor function usually assigned to a variable. The constructor function can then be used to make an instance of that component which can be assigned to a variable with the `new` keyword.

The events component can also be extended onto any object using the underscore library `_.extend([object], Backbone.Events)`

Model
Backbone.Model.extend({ [model properties] });
often used with few properties
properties can be custom methods
has an attributes property that can be set and retrieved using the `modelName.set()` and `modelName.get()` methods respectively.
`modelName.toJSON( )` returns an object that has all the attributes properties
other common properties
initialize, fetch, destroy, id

Collections
Backbone.Collection.extend({ [collection properties] });
a model property is often passed into the constructor when creating an instance.
constructorName.models returns an array of models contained by the collection
url: tells the collection where to retrieve the data for the collection from
fetch: fetches the default set of models and uses the `set` method to merge them to the collection.
initialize: can be used to set properties passed in which aren’t automatically set `this.url = options.url`
other common methods
add, remove, reset, get, set, pop, push, unshift, shift, length, pluck, findWhere

View
Backbone.View.extend({ [view properties] });
common properties
collection: can be passed in as a property and will be automatically assigned
model: same as collection
tagName: “[tag]” or leave as default view tag `div`
id: string that is used as the id on the view tag
$el: jQuery selection of view element, can be reassigned.
template, can refer to App.templates.[templateName]
initialize method: which is called when the constructor is called
can be used to call render( ) or assign the view to the model `this.model.view = this;`
render method: assign this.template to this.$el and add to your existing html
events: object with properties
property formatted as, “click header a”: “[viewPropertyName]”
uses first element in a jQuery on method and the second element is the property name used as the callback
custom properties

Router
Backbone.Router.extend({ [router properties] });
provides URL routing/history capabilities
a router will handle the incoming route value from the URL and invoke a function.
two ways to go to a route. By invoking it or requesting it.
you can invoke a route with `routerName.navigate(‘[route name]’);`
you can request a route by typing the URL into the browser
Backbone.history listens to the routes and manages history
common properties
routes: an object which contains properties with string names representing routes and a callback function on the right
ie. routes: { “albums/new”: App.newAlbum }
custom routes can be created with route method.
ie. `this.route(^\/?$/, “index”, [callbackName]);
format is route([routing string or regex], [route name], [callback])

Events
The Backbone object itself works as an event hub which your backbone objects can listen to
you can provide other objects with this ability with _.extend(object, Backbone.Events)
methods
listenTo allows you to listen to a particular event on another object
`object.listenTo(other, event, callback)` ie. `this.listenTo(this.indexView, “add_to_cart”, this.addCart);
trigger: triggers the callbacks for a given event
object.trigger(event, [args])
on: bind a callback function to an object and event
works similarly to jQuery on function
object.on(event, callback)
other methods: off, stopListening, once, listenOnce


Window Object

it is the global scope of client-side javascript
represents the object containing a DOM document and has methods relating to that object
useful properties:
innerWidth, innerHeight, alert, setTimeout
https://developer.mozilla.org/en-US/docs/Web/API/Window


History Object

Window.history returns a reference to the History object
allows you to access and manipulate the browser’s session history
has basic navigation controls: history.back(); history.forward(); history.go(2) (moves you forward two steps)
you can add and modify history entries
history.pushState(stateObj, “page 2”, “bar.html”)
pushes a state to the browser which will update the browser URL bar but won’t cause the browser to load that URL
a state object can be anything that can be serialized. Contains information about the state to be used by the view. Has 640K character size limit.
history.replaceState(stateObj, “page2”, “bar.html”)
works the same but instead of adding a state it replaces the existing state.


Webworkers

create a worker with `var worker = new Worker(“[scriptURL]”);
The scriptURL is fetched and executed in the background, creating a new global environment for the worker.
workers can’t access DOM object or global scope since they have a new global environment
worker.postMessage(message [, transfer]) will either clone a message included and transmit it to the worker environment or pass a list of objects as the transfer argument which are transferred rather than cloned. Transferred objects are no longer available on the sender’s side.
worker.terminate() will abort the worker environment.
worker.onmessage = function() is similar to calling worker.addEventListener(“message”, function( ) { } );
In order to communicate between the worker script and the main script you need to add an event listener (using onmessage or addEventListener on both ends
two types of web workers: Dedicated workers and Shared workers
Dedicated workers: created using the `new Worker()` constructor
dedicated workers can only be used by the script that called it.
Shared workers: created using the `new SharedWorker()` constructor
shared workers can be used by multiple scripts
shared workers are similar but must be communicated with using a port object
before messages can be posted to the port it must be started (not necessary with dedicated workers). This is done implicitly by the onmessage function or explicitly by calling `worker.port.start()` (required if you use addEventListener instead of onmessage).
workers can’t violate same-origin policy
same origin policy is the worker needs to have a URL with the same protocol (http/https), port (something.com/something.com:81) and host (something.com/somethingelse.com)

NPM

Node Package Manager
Packages (or modules) are directories with one or more files and a package.json file with some metadata
packages are small building blocks which solve a problem
can be code from outside your organization or you can save your own packages for reuse on other projects
Originally built for Node Modules (server side) (ie. express, socket.io, passport, nodemailer, mysql)
Some command line packages (ie. grunt, jshint)
Now has client-side tools as well ()



Bower

it is a node module (need NPM first)
Bower packages are git repos.
makes it easy to add and update dependencies
add dependencies with `bower install [dependency name]` will fetch latest stable version and save it in the subdirectory named bower_components
`bower install [dependency name] -S` saves dependency name into bower.json

Grunt

front-end build tool/task runner
tasks are organized in a file name “Gruntfile.js”
the file exports a function which has a grunt parameter
module.exports = function(grunt) {…}
The project configuration within the grunt file is done with the `initConfig` method on the `grunt` argument passed in.
grunt.initConfig( {…} );
the object passed into initConfig has properties which represent tasks. The property name is the task name.
uglify: { …[uglify targets and options] }
a task is an object which contains one or more targets and general task options (target specific options may be entered as well).
uglify: {
           target1: { …[target configuration] },
                 target2: { …[target configuration] },
         }
grunt tasks usually perform file operations so tasks have source and destination properties for the files.
they can be formatted:
src: 'src/aa.js’ (for single file locations)
dest: [‘dest/aa.js’, dest/bb.js’] (for multiple file locations)
or with a files object using the destination as the key and src as the value:
target1: {
          ‘dest/aa.js': [‘src/aa.js’, ‘src/aaa.js’],
          ‘dest/a1.js’: [‘src/aa1.js’, src/aaa1.js’],
        }
a task can be called in the command line by typing `grunt [task name]`.
the task will iterate over all targets unless a target is specified (ie. `grunt uglify:target1`)
Once the configuration object has been initialized the Grunt plugins need to be loaded. (this happens within the function being exported at the same level as grunt.initConfig)
grunt.loadNpmTasks(‘task name’);
Once all the tasks are loaded they can be registered for use in the command line
grunt.registerTask(’test’, [‘jshint’, ‘qunit’])
in the above example the string ‘test’ is what is used on the command line call. The following array is the tasks which will be run when that command is run.
registering a task with the ‘default’ as the first argument will assign which tasks to run on a basic ‘grunt’ command in the command line.


Jasmine

Jasmine is a testing framework
tests are included in a spec folder in the public/javascripts folder
a Jasmine Spec Runner html file is included which includes links and scripts for several files including:
jasmine favicon
jasmine css stylesheet
jasmine.js script
jasmine-html.js script
You need to add the coverage spec which you write.
Structure of coverage spec file:
Sections for testing are contained in a describe function call
describe(‘testSectionName’, function() { …tests}
individual tests are contained within `it` blocks
it(“testName”, function() { …code and expectations }
code and expectations are contained within the `it` block
expectations are written as `expect(<valueToCompare>).<matcherMethod>(<otherValueToCompare>);
eg. expect(foo).toEqual(2);
examples of matcher methods include:
toEqual(), toMatch(), toBeDefined(), toBeNull(), toBeTruthy(), toBeFalsey(), toContain(), toBeLessThan/GreaterThan(), toThrow(), toBeCloseTo()
in addition to `it` blocks there are a few other types of blocks including:
beforeAll, afterAll, beforeEach, afterEach
eg. beforeAll(function() { foo = 1; })
Spies can be set on a function and track what it does
`spyOn(foo, ‘setBar’)`
the above code will track the function ‘setBar’ on the object ‘foo'
by default spies note when a function was called and stop it from executing
alternatively you can chain a method to spyOn to allow the function to execute in various ways
spyOn(foo, ‘setBar’).and.<chained method>
callThrough - allows the function to run normally
returnValue - returns a specific value instead of running the function
callFake - supply a different function to be called instead
throwError - throw specified value as an error
stub - default, just stops execution
`spyOn(foo, ‘setBar’).and.callThrough`
the spyOn function has it’s own matcher methods including:
toHaveBeenCalled, toHaveBeenCalledTimes, toHaveBeenCalledWith
eg. expect(foo, ‘setBar’).toHaveBeenCalled()


Jade

templating language for HTML, code that is processed and dynamically creates html files
allows you to write simpler code that can be compiled to one from multiple files
also allows rendering data from the server-side into HTML, conditionals and mixins
you can use each similar to handlebars `each item in items`
then item will be a variable for use in the jade code
`h2= var` uses the variable output as the heading
`h2 var` uses the string “var” as the heading
attributes are placed in brackets `omg(src=“images.jpg”)
string interpolation also possible with “Hello, #{variable}”
mixins can be included with `include _mixin.jade`
mixin functions can be used by preceding them with a `+` symbol
`+stylesheet_tag(‘application.css’)`





Stylus

templating language for CSS
example

#items
  width: 200px
  padding: 8px
  ul
    padding: 0 0 10px 0

uses indents instead of curly braces
if selector is placed indented it is equivalent to combining with the parent selector (ie. `#items ul` above)
you can also use variables and objects
eg. store all colours on a colour object as properties, `colour.background`
functions are written as:

button()
  display: inline-block
  padding: 8px 15px

these functions can be called later in code as `button()` and will duplicate the code at the new location








